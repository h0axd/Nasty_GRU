#
# Nasty Grub Boot Disk
# Yor Phuckin Whale Cum
loadfont $prefix/fonts/unicode.pf2
loadfont "$prefix/unifont.pf2"
insmod all_video
insmod gfxterm
insmod gfxmenu
insmod png
set ngbd="${config_directory}"
set ngbd=yes
set default=2
set timeout=30
set lang=en
set ngbd_version=1.0
set pager=1
set gfxpayload=text
set icondir=$prefix/themes/icons
set ngbd_procbits=64
set ngbd_bootmode=EFI
if [ $grub_platform = efi ] ; then set ngbd_bootmode=EFI ; fi 
set ngbd_custmode=EFI
set ngbd_lastbooted=no
set ngbd_efilevel=128
set gfxmode=auto, 1920x1080
set theme=$prefix/themes/custom.config
if [ $ngbd_bootmode = EFI ] ; then set theme=$theme.$gnugrub_efibits.efi.txt ; fi
terminal_output gfxterm
# Init Nasty Grub Disk variables
insmod regexp
regexp -s "ngbd_dev_name" '^\((.*)\).*$' "$config_directory"
rmmod regexp
# Exports
export ngbd_dev_name
export theme
export ngbd
export icondir
#
function set_ngbd_colors 
{
  if [ "$bwcolor" = "yes" ]; then
    menu_color_normal=white/black
    menu_color_highlight=black/white
    menu_color_background=black/white
  else
    menu_color_normal=white/brown
    menu_color_highlight=white/blue
    menu_color_background=yellow/cyan
  fi
}
#
set_ngbd_colors
{
  menuentry $"Color ON/OFF" 

  if [ "$bwcolor" = 'yes' ]; then
    bwcolor=no
  else
    bwcolor=yes
  fi

  set_ngbd_colors
}
#
export menu_color_normal
export menu_color_highlight
export menu_color_background
export bwcolor
#
function process_main_option 
{

  set option_cfg="$1"
  source "${option_cfg}"
  menuentry "${option_title}" "${option_cfg}" 
  {
    set chosen=""
    export chosen
    set sourced_cfgs="${2}"
    export sourced_cfgs
    configfile "${ngbd_directory}/cfg/processo.cfg"
  }
}

function process_option 
{
  set option_cfg="$1"
  source "${option_cfg}"
  menuentry "${finaloption_tab_str}${option_title}" "${option_cfg}" 
  {
    set chosen=""
    export chosen
    set sourced_cfgs="${2}"
    export sourced_cfgs
    configfile "${ngbd_directory}/cfg/processo.cfg"
  }
}

function process_enable {

  set option_cfg="$1"
  set forced_prefix="$2"
  if [ "$forced_prefix" = "rootmenu" ]; then
    menu_prefix_str=""
  else
    menu_prefix_str="${finaloption_tab_str}"
  fi
  source "${option_cfg}"
  menuentry "${menu_prefix_str}${option_title}" "${option_cfg}" 
  {
    set chosen=""
    export chosen
    set sourced_cfgs="${2}"
    export sourced_cfgs
    configfile "${ngbd_directory}/cfg/processenable.cfg"
  }

}

function submenu_title {

  menuentry "${secondoption_prefixtab_str}${chosen}${secondoption_postfixtab_str}" 
  {
    sleep 1s
  }
  set timeout=10
}

# Get the version number for this Nasty Grub
source "${ngbd_directory}/cfg/version.cfg"

# Get design variables
source "${ngbd_directory}/cfg/design.cfg"

menuentry "====---==- Nasty Grun Disk $ngbd_version  -==---==== " 
{
  # Set pager=1 so ls output doesn't scroll past the top of the screen
  # but restore $pager to its previous value when finished
  set oldpager="${pager}"
  set pager=1
  set pager="${oldpager}"
  unset oldpager
  echo $"Press escape to return to the main menu"
  sleep --interruptible 9999
}

# Everything
menuentry $"Detect and show boot methods" 
{
  configfile "${ngbd_directory}/cfg/everything.cfg"
}

process_enable "${ngbd_directory}/cfg/enableraidlvm.cfg" rootmenu

process_enable "${ngbd_directory}/cfg/enablenative.cfg" rootmenu

submenu $"Booty manually""${three_dots_str}" 
{
  submenu_title

  process_option "${ngbd_directory}/cfg/osdetect.cfg"

  process_option "${ngbd_directory}/cfg/cfgextract.cfg"

  process_option "${ngbd_directory}/cfg/cfgdetect.cfg"

  process_option "${ngbd_directory}/cfg/menulstdetect.cfg"

  process_option "${ngbd_directory}/cfg/grubdetect.cfg"

  process_option "${ngbd_directory}/cfg/diskpartchainboot.cfg"

  process_option "${ngbd_directory}/cfg/autoiso.cfg"

  source "${ngbd_directory}/cfg/return.cfg"
}

submenu $"Extra Nasty functionality""${three_dots_str}" 
{
  submenu_title

  process_enable "${ngbd_directory}/cfg/enablelvm.cfg"

  process_enable "${ngbd_directory}/cfg/enableraid.cfg"

  process_enable "${ngbd_directory}/cfg/enableencrypted.cfg"

  process_enable "${ngbd_directory}/cfg/enablenative.cfg"

  process_enable "${ngbd_directory}/cfg/enableserial.cfg"

  process_enable "${ngbd_directory}/cfg/searchfloppy.cfg"

  process_enable "${ngbd_directory}/cfg/searchcdrom.cfg"

  process_enable "${ngbd_directory}/cfg/searchngbd.cfg"

  source "${ngbd_directory}/cfg/return.cfg"
}
#
function getbootpartition {
     set pager=0
     set searchtype=$1
     set partsearch=$2
     if [ $searchtype = label ] ; then
          search.fs_label $partsearch rootaddress
     else 
          search.file     $partsearch rootaddress
     fi
     if [ $? = 0 ] ; then
          set root=($rootaddress)
          echo
          echo -n Grub is setting root to $root
          echo "The boot partion $searchtype is $partsearch"
          echo
          return 0
     else 
          echo
          echo
          echo *** Grub did not find a boot partition with $searchtype $partsearch
          echo *** Press the ESC key to continue
          echo
          sleep -v -i 120 ; echo
          configfile $prefix/grub.cfg
     fi
}
#
menuentry $"Print devices/partitions" 
{
  # Set pager=1 so ls output doesn't scroll past the top of the screen
  # but restore $pager to its previous value when finished
  set oldpager="${pager}"
  set pager=1

  ls -l

  set pager="${oldpager}"
  unset oldpager

  echo $"Press escape to return to the main menu"
  sleep --interruptible 9999
}
#

#
submenu $"Exit""${three_dots_str}" {

  submenu_title

  process_option "${ngbd_directory}/cfg/halt.cfg"
  process_option "${ngbd_directory}/cfg/reboot.cfg"

  source "${ngbd_directory}/cfg/return.cfg"
}

# If it exists, source $prefix/ngbd_custom.cfg. This follows the same idea as
# grub-mkconfig generated grub.cfg files sourcing $prefix/custom.cfg, though
# it's less needed here since one could add custom code to this file directly
# whereas their distro might automatically overwrite /boot/grub/grub.cfg on
# kernel upgrades. The main motivation for adding this was the vmtest script
# which I use heavily during Super GRUB2 Disk development, but this feature
# might also be useful to others.
if [ -e "${ngbd_directory}/cfg/ngbd_custom.cfg" ]; then
  source "${ngbd_directory}/cfg/ngbd_custom.cfg"
elif [ -e "/boot/grub/ngbd_custom.cfg" ]; then
  source /boot/grub/ngbd_custom.cfg
fi
