###
##
#

set option_title=$"Operating Systems"

function get_efis 
{
	    blockdev="$1"
	    blockfs="$2"
	    efis=""
	    if [ "$blockfs" = "fat" ]; then
		    for efi in \
		      ($blockdev)/efi/*/*.efi \
		      ($blockdev)/efi/*/*/*.efi \
		      ($blockdev)/*.efi \
		      ($blockdev)/*/*.efi \
		      ($blockdev)/EFI/*/*.EFI \
		      ($blockdev)/EFI/*/*/*.EFI \
		      ($blockdev)/*.EFI \
		      ($blockdev)/*/*.EFI \
		      ($blockdev)/EFI/*/*.efi \
		      ($blockdev)/EFI/*/*/*.efi \
		      ($blockdev)/efi/*/*.EFI \
		      ($blockdev)/efi/*/*/*.EFI \
		      ; do
			    if [ -f "$efi" ] ; then
				    efis="$efis $efi"
			    fi
		    done
		    if [ -n "$efis" ]; then
			    return 0
		    fi
	    fi
	    return 1
}

function osx_entry_add 
{
	set device="$1"
	set uuid="$2"
	set kerncmd="$3"
	set arch="$4"
	set args="$5"
	set desc="$6"
	menuentry "${finaloption_tab_str}Mac OS X/Darwin $arch-bit ($device) - $desc" $device $uuid $kerncmd $args 
	{
    set root="$2"
    set uuid="$3"
    set kerncmd="$4"
    set args="$5"
	
    insmod all_video
    set do_resume=0
	if [ /var/vm/sleepimage -nt10 / ]; then
		if xnu_resume /var/vm/sleepimage; then
			set do_resume=1
		fi
	fi
	if [ $do_resume = 0 ]; then
		xnu_uuid ${uuid} uuid
		if [ -f /Extra/DSDT.aml ]; then
			acpi -e /Extra/DSDT.aml
		fi
		if [ /kernelcache -nt /System/Library/Extensions ]; then
			$kerncmd /kernelcache boot-uuid=${uuid} rd=*uuid $args
		else
			$kerncmd /mach_kernel boot-uuid=${uuid} rd=*uuid $args
			if [ /System/Library/Extensions.mkext -nt /System/Library/Extensions ]; then
				xnu_mkext /System/Library/Extensions.mkext
			else
				xnu_kextdir /System/Library/Extensions
			fi
		fi
		if [ -f /Extra/Extensions.mkext ]; then
			xnu_mkext /Extra/Extensions.mkext
		fi
		if [ -d /Extra/Extensions ]; then
			xnu_kextdir /Extra/Extensions
		fi
		if [ -f /Extra/devprop.bin ]; then
			xnu_devprop_load /Extra/devprop.bin
		fi
		if [ -f /Extra/splash.jpg ]; then
			insmod jpeg
			xnu_splash /Extra/splash.jpg
		fi
		if [ -f /Extra/splash.png ]; then
			insmod png
			xnu_splash /Extra/splash.png
		fi
		if [ -f /Extra/splash.tga ]; then
			insmod tga
			xnu_splash /Extra/splash.tga
		fi
		fi
	}
}

function flagplatform 
{
	ngbdflagplat=""
	if [ "$1" = "efi" ]; then
		if [ "${grub_platform}" = "efi" ]; then
			return 0
		else
			ngbdflagplat=$"UEFI-BOOT-REQUIRED:"
		fi
	else
		if [ "${grub_platform}" != "efi" ]; then
			return 0
		else
			ngbdflagplat=$"BIOS-BOOT-REQUIRED:"
		fi
	fi
}

function run_option 
{

    source "${ngbd_directory}/cfg/tools.cfg"

    set saved_root=$root

    insmod regexp


    for dev in (*); do
	# $device: parenthesis removed from $dev
	regexp -s device '\((.*)\)' $dev
	# Discard floppy and cdrom devices in search
	# But search them if their search has been enforced

	if searchindevice "$device" ; then


	    # $fstype: filesystem type identified
	    probe -s fstype -f $dev
	    # uuid: filesystem UUID
	    probe -s uuid -u $dev

	    if test \
           '(' -f ($device)/bootmgr -a -f ($device)/boot/bcd ')' \
           -o \
           '(' -f ($device)/bootmgr -a -f ($device)/boot/Bcd ')' \
           -o \
           '(' -f ($device)/bootmgr -a -f ($device)/boot/BCD ')' \
           -o \
           '(' -f ($device)/bootmgr -a -f ($device)/Boot/bcd ')' \
           -o \
           '(' -f ($device)/bootmgr -a -f ($device)/Boot/Bcd ')' \
           -o \
           '(' -f ($device)/bootmgr -a -f ($device)/Boot/BCD ')' \
           -o \
           '(' -f ($device)/bootmgr -a -f ($device)/BOOT/bcd ')' \
           -o \
           '(' -f ($device)/bootmgr -a -f ($device)/BOOT/Bcd ')' \
           -o \
           '(' -f ($device)/bootmgr -a -f ($device)/BOOT/BCD ')' \
        ; then
		flagplatform bios
		menuentry "${finaloption_tab_str}${ngbdflagplat}Windows Vista/7/8/2008 (R2) ... ($device)" $device 
		{
                 if withplatform bios ; then
		    set root="$2"
		    chainloader +1
                 fi
		}
		flagplatform bios
		menuentry "${finaloption_tab_str}${ngbdflagplat}Windows Vista/7/8/2008 (R2) (Direct /bootmgr) ... ($device)" $device 
		{
                 if withplatform bios ; then
		    set root="$2"
		    ntldr /bootmgr
                 fi
		}
	    elif test \
           '(' -f ($device)/ntldr -a -e ($device)/ntdetect.com -a -f ($device)/boot.ini ')' \
           -o \
           '(' -f ($device)/ntldr -a -e ($device)/ntdetect.com -a -f ($device)/BOOT.INI ')' \
           -o \
           '(' -f ($device)/ntldr -a -e ($device)/NTDETECT.COM -a -f ($device)/boot.ini ')' \
           -o \
           '(' -f ($device)/ntldr -a -e ($device)/NTDETECT.COM -a -f ($device)/BOOT.INI ')' \
           -o \
           '(' -f ($device)/NTLDR -a -e ($device)/ntdetect.com -a -f ($device)/boot.ini ')' \
           -o \
           '(' -f ($device)/NTLDR -a -e ($device)/ntdetect.com -a -f ($device)/BOOT.INI ')' \
           -o \
           '(' -f ($device)/NTLDR -a -e ($device)/NTDETECT.COM -a -f ($device)/boot.ini ')' \
           -o \
           '(' -f ($device)/NTLDR -a -e ($device)/NTDETECT.COM -a -f ($device)/BOOT.INI ')' \
        ; then
		flagplatform bios
		menuentry "${finaloption_tab_str}${ngbdflagplat}Windows NT/2000/XP ($device)" $device 
		{
		  if withplatform bios ; then
		    set root="$2"
		    regexp -s devnum 'hd([0-9]+)' $root
		    if test "$devnum" != "0"; then
			drivemap -s hd0 $root
		    fi
		    chainloader +1
		  fi
		}
		flagplatform bios
		menuentry "${finaloption_tab_str}${ngbdflagplat}Windows NT/2000/XP (Direct /ntldr) ($device)" $device 
		{
		  if withplatform bios ; then
		    ntldr /ntldr
		  fi
		}
	    elif test -f ($device)/windows/win.com; then
		flagplatform bios
		menuentry "${finaloption_tab_str}${ngbdflagplat}Windows 98/ME ($device)" $device 
		{
                  if withplatform bios ; then
		    set root="$2"
		    regexp -s devnum 'hd([0-9]+)' $root
		    if test "$devnum" != "0"; then
			drivemap -s hd0 $root
		    fi
		    chainloader +1
                  fi
		}
	    elif test -f ($device)/io.sys -a -f ($device)/command.com; then
		flagplatform bios
		menuentry "${finaloption_tab_str}${ngbdflagplat}MS-DOS ($device)" $device 
		{
                  if withplatform bios ; then
		    set root="$2"
		    regexp -s devnum 'hd([0-9]+)' $root
		    if test "$devnum" != "0"; then
			drivemap -s hd0 $root
		    fi
		    chainloader +1
                  fi
		}
	    elif test -f ($device)/kernel.sys; then
		flagplatform bios
		menuentry "${finaloption_tab_str}${ngbdflagplat}FreeDOS ($device)" $device {
                  if withplatform bios ; then
		    set root="$2"
		    regexp -s type '([fh])d[0-9]+' $root
		    regexp -s devnum '[fh]d([0-9]+)' $root
		    if test $type = 'h' -a "$devnum" != "0"; then
			drivemap -s hd0 $root
		    fi
		    chainloader +1
                  fi
		}
	    elif test "$fstype" = ufs1 -o "$fstype" = ufs2 -a \
		-e ($device)/boot/kernel/kernel -a \
		-e ($device)/boot/device.hints; then

		freebsd_ufs_variants $device $fstype $uuid

	    elif test "$fstype" = zfs -a \
		-e ($device)/@/boot/kernel/kernel -a \
		-e ($device)/@/boot/device.hints; then

		freebsd_zfs_variants $device

	    elif test "$fstype" = hfsplus -a -f ($device)/mach_kernel -a -d ($device)/Users; then
			osx_entry_add $device $uuid "xnu_kernel" "32" "-v" "Verbose Mode"
			osx_entry_add $device $uuid "xnu_kernel" "32" "-x" "Safe Mode"
			osx_entry_add $device $uuid "xnu_kernel" "32" "-s" "Single User"
			osx_entry_add $device $uuid "xnu_kernel" "32" "-f" "Ignore Caches"
			osx_entry_add $device $uuid "xnu_kernel64" "64" "-v" "Verbose Mode"
			osx_entry_add $device $uuid "xnu_kernel64" "64" "-x" "Safe Mode"
			osx_entry_add $device $uuid "xnu_kernel64" "64" "-s" "Single User"
			osx_entry_add $device $uuid "xnu_kernel64" "64" "-f" "Ignore Caches"

	    elif get_efis $device $fstype; then
		flagplatform efi
		    for efi in $efis; do
			    menuentry "${finaloption_tab_str}${ngbdflagplat}${efi} ($device)" "$efi" "$device" 
				{
				    efi_device="$3"
				    efi="$2"
				    if withplatform efi; then
					    root="$efi_device"
					    chainloader "$efi"
				    fi
			    }
		    done
	    else
		set root=$device
		for file in /boot/vmlinuz-* /boot/linux-* /boot/kernel-genkernel-*; do
		    if test -f $file; then
			regexp -s version '/boot/vmlinuz-(.*)' $file
			regexp -s version '/boot/linux-(.*)' $file
			regexp -s version '/boot/kernel-genkernel-(.*)' $file

			menuentry "${finaloption_tab_str}Linux $file ($device)" $device $uuid $file $version 
			{
			    set root="$2"
			    set uuid="$3"
			    set kernel="$4"
			    set version="$5"

			    linux $kernel root=UUID=$uuid ro
			    if test -f /boot/initrd-$version.img; then
				initrd /boot/initrd-$version.img
			    elif test -f /boot/initrd.img-$version; then
				initrd /boot/initrd.img-$version
			    elif test -f /boot/initrd-$version; then
				initrd /boot/initrd-$version
			    elif test -f /boot/initramfs-genkernel-$version; then
				initrd /boot/initramfs-genkernel-$version
			    elif test -f /boot/initramfs-$version.img; then
				initrd /boot/initramfs-$version.img
			    fi
			}

			menuentry "${finaloption_tab_str}Linux $file (single) ($device)" $device $uuid $file $version 
			{
			    set root="$2"
			    set uuid="$3"
			    set kernel="$4"
			    set version="$5"

			    linux $kernel root=UUID=$uuid ro single
			    if test -f /boot/initrd-$version.img; then
				initrd /boot/initrd-$version.img
			    elif test -f /boot/initrd.img-$version; then
				initrd /boot/initrd.img-$version
			    elif test -f /boot/initrd-$version; then
				initrd /boot/initrd-$version
			    elif test -f /boot/initramfs-genkernel-$version; then
				initrd /boot/initramfs-genkernel-$version
			    elif test -f /boot/initramfs-$version.img; then
				initrd /boot/initramfs-$version.img
			    fi
			}
		    fi
		done
	    fi
	fi
    done

    set root=$saved_root


}
